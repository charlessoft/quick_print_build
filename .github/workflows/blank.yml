name: CI
on:
  repository_dispatch:
    types:
      - webhook-1
      - webhook-2
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]  
env:
  DEFAULT_DDING_SECRET: 'SECbe4003c4d14c740788cf9383fa1d8d77c029a03e6df99dde528274b9bcc17926'
  DEFAULT_DDING_TOKEN: 'fd87df4f83611b4c4cf31d5ad48f890f9603b57b1cac3d52fb80df8b86a5b629'
jobs:
  msw-msvs:
    runs-on: windows-${{ matrix.vsversion }}
    name: wxMSW vs${{ matrix.vsversion }} ${{ matrix.configuration }} ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: 'Release'
            platform: 'x64'
            vsversion: 2019
    steps:

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_GITEE_PRIVATE_KEY }}
      - name: Add Gitee to known hosts
        run: |
          ssh-keyscan gitee.com >> ~/.ssh/known_hosts
    
      - uses: lukka/get-cmake@latest

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dding on non-Windows
        if: runner.os != 'Windows'
        run: |
          pip install dding
          mkdir -p ~/.dding
          dding_secret="${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
          dding_token="${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
          cat <<EOF > ~/.dding/config.json
          [
              {
                  "group": "default",
                  "secret": "$dding_secret",
                  "token": "$dding_token"
              }
          ]
          EOF
      
      - name: Install dding on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pip install dding
          New-Item -Path $HOME\.dding -ItemType Directory -Force
          $dding_secret = "${{ github.event.client_payload.dding_secret || env.DEFAULT_DDING_SECRET }}"
          $dding_token = "${{ github.event.client_payload.dding_token || env.DEFAULT_DDING_TOKEN }}"
          $config = @"
          [
              {
                  "group": "default",
                  "secret": "$dding_secret",
                  "token": "$dding_token"
              }
          ]
          "@
          $config | Out-File -FilePath $HOME\.dding\config.json -Encoding utf8


      # - name: Set up proxy
      #   run: |
      #     git config --global http.proxy socks5://python:psdemo982@123.60.164.114:11654


      - name: Clone repository from Gitee with trace
        shell: pwsh
        run: |
          $env:GIT_TRACE = "1"
          git clone git@gitee.com:charlesabc/quick-print.git
        
          # git clone git@gitee.com:charlesabc/quick-print.git
          # git clone https://oauth2:${{ secrets.GITEE_TOKEN }}@gitee.com/charlesabc/quick-print.git 

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        
      - name: CMake
        shell: powershell
        run: |
          pwd
          dir 
          cd quick-print/build
          cmake ../ -G "Visual Studio 16 2019"

          # run CMake (additional options like -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE are possible)
          # it is recommended to specify the compiler version used for the build
          # cmake -S . -B cbuild/ -DCRASHPAD_BUILD_EXAMPLES=TRUE -DCMAKE_CXX_COMPILER=cl.exe -DCMAKE_C_COMPILER=cl.exe -DCMAKE_BUILD_TYPE=Release
          # cmake --build cbuild/ --config Release -- /p:Configuration=Release

      - name: Download External Lib
        run: |
          set PYTHONIOENCODING=utf-8
          cd quick-print/tools/external_lib
          pip install -r requirements.txt
          python download.py --arch x64 --build_types dbg
          python download.py --arch x64 --build_types rel
          ls ../../external/wxWidgets/
          echo "----------------------------------------------------------------------"
          ls ../../external/wxWidgets/win
          echo "----------------------------------------------------------------------"
          ls ../../external/wxWidgets/win//include
          echo "----------------------------------------------------------------------"
          ls ../../external/wxWidgets/win//include/wx
          
          
          


      - name: Build with MSBuild
        run: msbuild -m -t:Build -p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} quick-print/build/quick-print.sln


        
